<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>打个招呼吧！</title>
    <link href="/2021/08/08/hello-world/"/>
    <url>/2021/08/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>大家好，我叫小武，欢迎来到我的博客。在这里我会分享一些学习笔记以及生活上去的趣事。感谢大家的关注😋😋</p><p><em>打个广告哈：</em></p><p>我在B站上 [<a href="https://space.bilibili.com/54377431">@小五很哇塞</a>] 也会上传一些视频，如果喜欢看的话，不妨三连一波~</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java笔记-反射</title>
    <link href="/2021/08/08/Java%E7%AC%94%E8%AE%B0-%E5%8F%8D%E5%B0%84Reflection/"/>
    <url>/2021/08/08/Java%E7%AC%94%E8%AE%B0-%E5%8F%8D%E5%B0%84Reflection/</url>
    
    <content type="html"><![CDATA[<h1 id="Java笔记-反射Reflection"><a href="#Java笔记-反射Reflection" class="headerlink" title="Java笔记-反射Reflection"></a>Java笔记-反射Reflection</h1><p><a href="https://www.bilibili.com/video/BV1g84y1F7df">【韩顺平讲Java】Java反射专题 -反射 反射机制 类加载 reflection Class 类结构 等_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><h2 id="为什么需要反射？"><a href="#为什么需要反射？" class="headerlink" title="为什么需要反射？"></a>为什么需要反射？</h2><p>大部分的框架都是基于Java中的反射机制实现的，可以说是反射成就了Java的繁荣。</p><p>设想有这样一个场景：通过读取配置文件，创建需要的对象，并调用配置文件中指定的方法。这样我们可以仅仅通过修改配置文件就可以改变业务功能，而不用去改变代码。在这种场景下，就正好可以通过反射来实现。这种场景就经常出现在一些框架的实现中，同时也体现了设计模式中的开闭原则OCP。</p><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210504211008065.png" alt="image-20210504211008065"></p><h2 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a>怎么使用？</h2><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210504214623691.png" alt="image-20210504214623691"></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210504214718992.png" alt="image-20210504214718992"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class cls = Class.forName(<span class="hljs-string">&quot;com.twg.Cat&quot;</span>);<br><br>Method m = cls.getMethod(<span class="hljs-string">&quot;hi&quot;</span>);  <span class="hljs-comment">//获取方法</span><br>m.invoke();  <span class="hljs-comment">// 执行方法</span><br><br>Object o = cls.newInstance();  <span class="hljs-comment">// 获取对象</span><br>Field f = cls.getField(<span class="hljs-string">&quot;name&quot;</span>);  <span class="hljs-comment">// 获取属性</span><br>f.get(o);<br><br><br>cls.getConstructor();  <span class="hljs-comment">// 获取构造方法</span><br>cls.getConstructor(String.class);  <span class="hljs-comment">// 获取带参数的构造方法</span><br></code></pre></div></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210504214819250.png" alt="image-20210504214819250"></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210504215446703.png" alt="image-20210504215446703"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">method.setAccessible(<span class="hljs-keyword">true</span>);  <span class="hljs-comment">// 取消访问检查</span><br></code></pre></div></td></tr></table></figure><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><h3 id="Class的几种成员方法"><a href="#Class的几种成员方法" class="headerlink" title="Class的几种成员方法"></a>Class的几种成员方法</h3><p><img src="H:\blog\assertPics\image-20210504220901447.png" alt="image-20210504220901447"></p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">Class&lt;?&gt; cls = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;com.twg.Car&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(cls);  <span class="hljs-comment">// com.twg.Car</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(cls.get<span class="hljs-constructor">Class()</span>);  <span class="hljs-comment">// java.lang.Class</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(cls.get<span class="hljs-constructor">Package()</span>.get<span class="hljs-constructor">Name()</span>);  <span class="hljs-comment">// com.twg</span><br><br><span class="hljs-comment">// 通过cls创建对象实例</span><br>Car car = (Car)cls.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;<br><br><span class="hljs-comment">// 获取属性，但是该方法不能获取私有属性</span><br>Field brand = cls.get<span class="hljs-constructor">Field(<span class="hljs-string">&quot;barnd&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(brand.get(car));<br>brand.set(car,<span class="hljs-string">&quot;奔驰&quot;</span>);<br><br><span class="hljs-comment">// 获取所有属性</span><br>Field<span class="hljs-literal">[]</span> fields = cls.get<span class="hljs-constructor">Fields()</span>;<br><br></code></pre></div></td></tr></table></figure><h3 id="获取类对象的几种方法"><a href="#获取类对象的几种方法" class="headerlink" title="获取类对象的几种方法"></a>获取类对象的几种方法</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 1) Class.forName()已知类的全路径，一般读取配置文件获取</span><br>Class.forName(<span class="hljs-string">&quot;xxx.xxx&quot;</span>);<br><br><span class="hljs-comment">// 2) 类名.class用于参数传递</span><br>System.out.println(Car.class);<br><br><span class="hljs-comment">// 3) 对象.getClass()有对象实例时</span><br>car.getClass();<br><br><span class="hljs-comment">// 4) 通过类加载器【4种】</span><br>ClassLoader classLoader = car.getClass().getClassLoader();<br>Class cls = classLoader.loadClass(classAllPath);<br><br><span class="hljs-comment">// 5) 基本数据类型（int short long float double char boolean byte）</span><br>Class cls = <span class="hljs-keyword">int</span>.class;<br><br><span class="hljs-comment">// 6) 基本数据类型的包装类</span><br>Class cls = Integer.TYPE;<br><br></code></pre></div></td></tr></table></figure><h3 id="动态加载-amp-静态加载"><a href="#动态加载-amp-静态加载" class="headerlink" title="动态加载&amp;静态加载"></a>动态加载&amp;静态加载</h3><p>静态加载：编译时就加载这个类，如果没有就会报错，依赖性太强</p><p>动态加载：运行时才加载，降低了依赖性，反射就是动态加载</p><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p><img src="H:\blog\assertPics\image-20210505161219670.png" alt="image-20210505161219670"></p><p><img src="H:\blog\assertPics\image-20210505161619906.png" alt="image-20210505161619906"></p><ol><li><p>加载</p><p>将字节码从不同的数据源（class文件、jar包、网络）转化为二进制字节流加载到内存中，并生成该类的java.lang.Class对象。</p></li><li><p>连接</p><p><img src="H:\blog\assertPics\image-20210505162004958.png" alt="image-20210505162004958"></p><p><img src="H:\blog\assertPics\image-20210505162255152.png" alt="image-20210505162255152"></p><p><img src="H:\blog\assertPics\image-20210505162709684.png" alt="image-20210505162709684"></p></li><li><p>初始化</p><p><img src="H:\blog\assertPics\image-20210505163248206.png" alt="image-20210505163248206"></p></li></ol><h2 id="获取类的结构信息"><a href="#获取类的结构信息" class="headerlink" title="获取类的结构信息"></a>获取类的结构信息</h2><p><img src="H:\blog\assertPics\image-20210505170602330.png" alt="image-20210505170602330"></p><h2 id="反射”爆破”"><a href="#反射”爆破”" class="headerlink" title="反射”爆破”"></a>反射”爆破”</h2><p>所谓爆破，就是可以访问到私有的属性或方法。</p><p>爆破创建实例</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Constructor con = userClass.getDeclaredConstructor(<span class="hljs-keyword">int</span>.class,String.class);<br>con.setAccessible(<span class="hljs-keyword">true</span>);  <span class="hljs-comment">// 爆破</span><br>Object obj = con.newInstance(<span class="hljs-number">100</span>,<span class="hljs-string">&quot;Bob&quot;</span>);<br><br></code></pre></div></td></tr></table></figure><p>爆破操作属性</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Field f = userClass.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br>f.setAccessible(<span class="hljs-keyword">true</span>);<br>f.set(对象obj,<span class="hljs-number">100</span>);<br>f.get(对象obj);<span class="hljs-comment">//如果是静态属性，obj这个参数可以写null</span><br></code></pre></div></td></tr></table></figure><p>爆破方法</p><figure class="highlight oxygene"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs oxygene"><span class="hljs-function"><span class="hljs-keyword">Method</span> <span class="hljs-title">m</span> = <span class="hljs-title">userClass</span>.<span class="hljs-title">getDeclaredMethod</span><span class="hljs-params">(方法名,XX.<span class="hljs-keyword">class</span>)</span>;</span><br>m.setAccessible(<span class="hljs-keyword">true</span>);  <span class="hljs-comment">// 爆破</span><br>Object returnValue = m.invoke(obj,实参列表);  <span class="hljs-comment">// 静态方法，obj可以填null</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java笔记-正则</title>
    <link href="/2021/08/08/Java%E7%AC%94%E8%AE%B0-%E6%AD%A3%E5%88%99/"/>
    <url>/2021/08/08/Java%E7%AC%94%E8%AE%B0-%E6%AD%A3%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="Java笔记-正则"><a href="#Java笔记-正则" class="headerlink" title="Java笔记 正则"></a>Java笔记 正则</h1><h2 id="初探正则"><a href="#初探正则" class="headerlink" title="初探正则"></a>初探正则</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       String str = <span class="hljs-string">&quot;1919年，一位教授在《新青年》上发表了一篇系统介绍马克思主义理论的文章，&quot;</span> +<br>               <span class="hljs-string">&quot;热情赞颂马克思主义为“世界改造原动的学说”，并公开申明自己对马克思主义的信仰，&quot;</span> +<br>               <span class="hljs-string">&quot;但同时也认为，不可将“马氏的学说”就“那样整个拿来，应用于我们生存的社会”。&quot;</span> +<br>               <span class="hljs-string">&quot;此后，他更是明确提出，对待马克思主义必须研究它“怎样应用于中国今日的政治经济情形”。&quot;</span> +<br>               <span class="hljs-string">&quot;这位教授便是中国共产党的主要创始人之一——李大钊。以科学的态度对待马克思主义，&quot;</span> +<br>               <span class="hljs-string">&quot;视马克思主义是革命的科学，而不是抽象的学理和不变的教条，这样的态度，正是中国共产党人一以贯之的立场追求，&quot;</span> +<br>               <span class="hljs-string">&quot;贯穿于我们党的百年奋斗历程。&quot;</span>;<br>       String rgx = <span class="hljs-string">&quot;\\d\\d\\d\\d&quot;</span>;<br>       Pattern pattern = Pattern.compile(rgx);<br>       Matcher matcher = pattern.matcher(str);<br>       <span class="hljs-keyword">while</span> (matcher.find())&#123;<br>           System.out.println(matcher.group(<span class="hljs-number">0</span>));<br>       &#125;<br><br>   &#125;<br></code></pre></div></td></tr></table></figure><p><img src="H:\blog\assertPics\image-20210606101110770.png" alt="image-20210606101110770"></p><p>找到后，将子字符串的开始索引记录到matcher对象的属性int[] groups的groups[0]=0中，将结束的索引+1记录到groups[1]=4中。</p><p>同时记录oldLast的值，记录为“结束的索引+1”，即下次find()从“4”这个位置开始找。</p><p>matcher.group(0)：截取str的子串：位置从groups[0]-groups[1]</p><p>group(x)：x可以为其它参数，当正则中使用到分组时：例如上面的正则换成</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">(\\d\\d)(\\d\\d)<br><br><span class="hljs-keyword">while</span> (matcher.find())&#123;<br>System.out.println(matcher.group(<span class="hljs-number">0</span>));<span class="hljs-comment">//1919</span><br>    System.out.println(matcher.group(<span class="hljs-number">1</span>));<span class="hljs-comment">//19</span><br>    System.out.println(matcher.group(<span class="hljs-number">2</span>));<span class="hljs-comment">//19</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>group()源码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">group</span><span class="hljs-params">(<span class="hljs-keyword">int</span> group)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (first &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;No match found&quot;</span>);<br>        <span class="hljs-keyword">if</span> (group &lt; <span class="hljs-number">0</span> || group &gt; groupCount())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IndexOutOfBoundsException(<span class="hljs-string">&quot;No group &quot;</span> + group);<br>        <span class="hljs-keyword">if</span> ((groups[group*<span class="hljs-number">2</span>] == -<span class="hljs-number">1</span>) || (groups[group*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] == -<span class="hljs-number">1</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">return</span> getSubSequence(groups[group * <span class="hljs-number">2</span>], groups[group * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]).toString();<br>    &#125;<br></code></pre></div></td></tr></table></figure><h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">匹配两个连续的相同数字：(<span class="hljs-symbol">\\</span>d)<span class="hljs-symbol">\\</span>1<br><br>匹配五个连续的相同数字：(<span class="hljs-symbol">\\</span>d)<span class="hljs-symbol">\\</span>1&#123;4&#125;<br><br>匹配个位与千位相同，十位与百位相同的数：(<span class="hljs-symbol">\\</span>d))(<span class="hljs-symbol">\\</span>d)<span class="hljs-symbol">\\</span>2<span class="hljs-symbol">\\</span>1<br></code></pre></div></td></tr></table></figure><h2 id="结巴去重案例"><a href="#结巴去重案例" class="headerlink" title="结巴去重案例"></a>结巴去重案例</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reg03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String content = <span class="hljs-string">&quot;我我。。。。我。。要学。学学学Java&quot;</span>;<br>        String s1 = Pattern.compile(<span class="hljs-string">&quot;\\。&quot;</span>).matcher(content).replaceAll(<span class="hljs-string">&quot;&quot;</span>);<br>        String s2 = Pattern.compile(<span class="hljs-string">&quot;(.)\\1+&quot;</span>).matcher(s1).replaceAll(<span class="hljs-string">&quot;$1&quot;</span>);<br>        System.out.println(content);<br>        System.out.println(s1);<br>        System.out.println(s2);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="String类中使用正则"><a href="#String类中使用正则" class="headerlink" title="String类中使用正则"></a>String类中使用正则</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reg04</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//替换</span><br>        String s = <span class="hljs-string">&quot;hello123wo0rld&quot;</span>;<br>        System.out.println(s);<br>        s = s.replaceAll(<span class="hljs-string">&quot;\\d&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(s);<br><br>        <span class="hljs-comment">//分割</span><br>        String s2 = <span class="hljs-string">&quot;2000-03-27 12:00:00&quot;</span>;<br>        System.out.println(s2);<br>        String[] split = s2.split(<span class="hljs-string">&quot;-|:|\\s&quot;</span>);<span class="hljs-comment">//“\\s”表示空格</span><br>        <span class="hljs-keyword">for</span> (String s1 : split) &#123;<br>            System.out.println(s1);<br>        &#125;<br><br>        <span class="hljs-comment">//匹配</span><br>        String s3 = <span class="hljs-string">&quot;13833330000&quot;</span>;<br>        System.out.println(s3.matches(<span class="hljs-string">&quot;1(38|37)\\d&#123;8&#125;&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="H:\blog\assertPics\image-20210616171059331.png" alt="image-20210616171059331"></p><h2 id="匹配邮箱"><a href="#匹配邮箱" class="headerlink" title="匹配邮箱"></a>匹配邮箱</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reg05</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;wuguotang@gamil.com&quot;</span>;<br>        <span class="hljs-keyword">if</span>(s.matches(<span class="hljs-string">&quot;^[\\w|_]+@([\\w]+\\.)+[a-z|A-Z]+$&quot;</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;yes&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;no&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="匹配数字-正、负，整，小数。"><a href="#匹配数字-正、负，整，小数。" class="headerlink" title="匹配数字-正、负，整，小数。"></a>匹配数字-正、负，整，小数。</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reg05</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;-0.012&quot;</span>;<br>        <span class="hljs-keyword">if</span>(s.matches(<span class="hljs-string">&quot;^[+-]([1-9]\\d*|0)(.\\d+)?$&quot;</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;yes&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;no&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="对URL进行解析"><a href="#对URL进行解析" class="headerlink" title="对URL进行解析"></a>对URL进行解析</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reg05</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;https://www.fanyi.baidu.com:8080/home/index.html&quot;</span>;<br>        Pattern compile = Pattern.compile(<span class="hljs-string">&quot;^([a-zA-Z]+)://([a-zA-Z.]+):(\\d+)[\\w-/]*/([\\w.]+)$&quot;</span>);<br>        Matcher matcher = compile.matcher(s);<br>        <span class="hljs-keyword">if</span>(matcher.find())&#123;<br>            System.out.println(matcher.group(<span class="hljs-number">0</span>));<br>            System.out.println(matcher.group(<span class="hljs-number">1</span>));<br>            System.out.println(matcher.group(<span class="hljs-number">2</span>));<br>            System.out.println(matcher.group(<span class="hljs-number">3</span>));<br>            System.out.println(matcher.group(<span class="hljs-number">4</span>));<br><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="H:\blog\assertPics\image-20210616175659937.png" alt="image-20210616175659937"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Pattern.compile(<span class="hljs-string">&quot;^hello\\sworld$&quot;</span>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java笔记-集合</title>
    <link href="/2021/08/08/Java%E7%AC%94%E8%AE%B0-%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/"/>
    <url>/2021/08/08/Java%E7%AC%94%E8%AE%B0-%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Java笔记-集合专题"><a href="#Java笔记-集合专题" class="headerlink" title="Java笔记-集合专题"></a>Java笔记-集合专题</h1><h2 id="集合体系图"><a href="#集合体系图" class="headerlink" title="集合体系图"></a>集合体系图</h2><p>集合主要分为两种：</p><p>​    Collection： List、Set；属于单列集合</p><p>​    Map：双列集合，存放Key-Value</p><p><img src="H:\blog\assertPics\image-20210506192747886.png" alt="image-20210506192747886"></p><p><img src="H:\blog\assertPics\image-20210506192801220.png" alt="image-20210506192801220"></p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>这些是List和Set都继承了的方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ArrayList arrayList = <span class="hljs-keyword">new</span> ArrayList();<br>arrayList.add(<span class="hljs-string">&quot;阿武&quot;</span>);<br>arrayList.add(<span class="hljs-number">18</span>);<br>arrayList.add(<span class="hljs-number">0.8f</span>);<br>arrayList.add(<span class="hljs-keyword">true</span>);<br>arrayList.add(<span class="hljs-keyword">true</span>);<br>System.out.println(arrayList);<br>arrayList.remove(<span class="hljs-number">2</span>);<br>System.out.println(arrayList);<br>arrayList.remove(<span class="hljs-keyword">true</span>);<br>System.out.println(arrayList);<br>System.out.println(arrayList.size());<br><span class="hljs-comment">// contains();addAll();clearAll();</span><br></code></pre></div></td></tr></table></figure><p><img src="H:\blog\assertPics\image-20210506203531547.png" alt="image-20210506203531547"></p><h3 id="遍历Collection"><a href="#遍历Collection" class="headerlink" title="遍历Collection"></a>遍历Collection</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Iterator iterator = arrayList.iterator();<br><span class="hljs-comment">// 快捷键itit</span><br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>    Object next = iterator.next();<br>    System.out.println(<span class="hljs-string">&quot;obj: &quot;</span> + next);<br>&#125;<br><br><span class="hljs-comment">// 使用增强for替换迭代器，其底层仍是迭代器</span><br><span class="hljs-comment">// 快捷键arrayList.for</span><br>System.out.println(<span class="hljs-string">&quot;增强for迭代===========&quot;</span>);<br><span class="hljs-keyword">for</span> (Object o : arrayList) &#123;<br>    System.out.println(<span class="hljs-string">&quot;obj:&quot;</span> + o);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="ArrayList底层"><a href="#ArrayList底层" class="headerlink" title="ArrayList底层"></a>ArrayList底层</h3><p><img src="H:\blog\assertPics\image-20210506212823395.png" alt="image-20210506212823395"></p><p>上面的transient表示：被修饰的属性是瞬间的，短暂的，不会被序列化。</p><h4 id="使用无参构造器创建ArrayList："><a href="#使用无参构造器创建ArrayList：" class="headerlink" title="使用无参构造器创建ArrayList："></a>使用无参构造器创建ArrayList：</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayListSource</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList list = <span class="hljs-keyword">new</span> ArrayList();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">12</span>; i++) &#123;<br>            list.add(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用无参构造器，首先创建了一个空的elementData数组；从这里可见：ArrayList的底层是通过数组实现的，而这个elementData就是存放数据的数组。</p><p><img src="H:\blog\assertPics\image-20210506213448685.png" alt="image-20210506213448685"></p><p><img src="H:\blog\assertPics\image-20210506213539990.png" alt="image-20210506213539990"></p><p>然后我们看添加元素的方法：</p><p>e：代表要添加的元素；</p><p>modCount：记录集合被修改的次数</p><p>在这个add中其实调用了另一个add方法，而这第二个是真正实现添加操作的。</p><p><img src="H:\blog\assertPics\image-20210506213916692.png" alt="image-20210506213916692"></p><p>s：指示在ArrayList中添加的元素个数；</p><p>elementData.length：表示当前的容量；</p><p>当两者相等，表示当前容量不够，需要自动增加容量了。–&gt;grow()</p><p>确保有剩余的空间来添加元素后，才进行真正的添加元素：</p><p>elementData[s]=e;     //添加到尾部</p><p>size = s+1;                 //更新元素个数</p><p><img src="H:\blog\assertPics\image-20210506214028824.png" alt="image-20210506214028824"></p><p>s==elementData.length：需要扩容时</p><p>扩容的方法：</p><p>minCapacity：指示当前ArrayList所需要的最小容量，添加当前这个元素所需要的容量。</p><p>newCapacity()：计算自动扩容后的容量</p><p>扩容：将原数组复制到一个更大的数组–》Array.copyOf()，这样可以保留原先的数据</p><p><img src="H:\blog\assertPics\image-20210506214058167.png" alt="image-20210506214058167"></p><p><img src="H:\blog\assertPics\image-20210506214115602.png" alt="image-20210506214115602"></p><p>最后看下扩容的容量是怎么算的–》newCapacity()</p><p>第一次扩容情况特殊，通过方法中第二条语句计算得到的newCapacity仍然是0，所以要通过下面的判断来进行特殊处理。</p><p>后面的就是按照：newCapacity = oldCapacity + (oldCapacity&gt;&gt;1);  // 等价于扩容到原来容量的1.5倍</p><p><img src="H:\blog\assertPics\image-20210506214231510.png" alt="image-20210506214231510"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">DEFAULT_CAPACITY = <span class="hljs-number">10</span>;<span class="hljs-comment">//默认容量是10</span><br>MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="hljs-number">8</span>  <span class="hljs-comment">// MAX_VALUE = 0x7fffffff=2147483647</span><br></code></pre></div></td></tr></table></figure><p><img src="H:\blog\assertPics\image-20210506214409897.png" alt="image-20210506214409897"></p><h4 id="使用带参构造器"><a href="#使用带参构造器" class="headerlink" title="使用带参构造器"></a>使用带参构造器</h4><p>使用带参数的构造器时，elementData的默认容量就是所传的参数，后面容量的自动增长也是增加到原来的1.5倍。</p><p><img src="H:\blog\assertPics\image-20210507091027392.png" alt="image-20210507091027392"></p><p><img src="H:\blog\assertPics\image-20210507091322938.png" alt="image-20210507091322938"></p><p><img src="H:\blog\assertPics\image-20210507091549618.png" alt="image-20210507091549618"></p><h3 id="Vector底层"><a href="#Vector底层" class="headerlink" title="Vector底层"></a>Vector底层</h3><p><img src="H:\blog\assertPics\image-20210507173525791.png" alt="image-20210507173525791"></p><h4 id="无参构造器"><a href="#无参构造器" class="headerlink" title="无参构造器"></a>无参构造器</h4><p><img src="H:\blog\assertPics\image-20210507173912482.png" alt="image-20210507173912482"></p><p>从源码中，我们可以看到，不管我们使用的是有参还是无参的构造器，它最终都是通过Vector(int initialCapacity, int capacityIncrement)实现的；而且使用无参构造器，实际是创建了一个默认容量为10的Vector。</p><p><img src="H:\blog\assertPics\image-20210509100555854.png" alt="image-20210509100555854"></p><p><img src="H:\blog\assertPics\image-20210509100609556.png" alt="image-20210509100609556"></p><p><img src="H:\blog\assertPics\image-20210509100622650.png" alt="image-20210509100622650"></p><p>我们再来看下add()方法，感觉和ArrayList的add()很类似，不同的是，Vector扩容时，时扩容到原来的2倍。</p><p><img src="H:\blog\assertPics\image-20210507175430706.png" alt="image-20210507175430706"></p><p><img src="H:\blog\assertPics\image-20210507175448610.png" alt="image-20210507175448610"></p><p><img src="H:\blog\assertPics\image-20210507175504372.png" alt="image-20210507175504372"></p><p><img src="H:\blog\assertPics\image-20210507175516183.png" alt="image-20210507175516183"></p><p><img src="H:\blog\assertPics\image-20210507175535486.png" alt="image-20210507175535486"></p><p><img src="H:\blog\assertPics\image-20210507175656167.png" alt="image-20210507175656167"></p><h3 id="LinkedList底层"><a href="#LinkedList底层" class="headerlink" title="LinkedList底层"></a>LinkedList底层</h3><p>底层实现了双向链表和双端队列的特点。</p><p>线程不安全，没有实现同步。</p><p><img src="H:\blog\assertPics\image-20210507181602078.png" alt="image-20210507181602078"></p><p><img src="H:\blog\assertPics\image-20210507181850120.png" alt="image-20210507181850120"></p><p><img src="H:\blog\assertPics\image-20210507181906299.png" alt="image-20210507181906299"></p><p><img src="H:\blog\assertPics\image-20210507232843541.png" alt="image-20210507232843541"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedListSource</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        LinkedList linkedList = <span class="hljs-keyword">new</span> LinkedList();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            linkedList.add(i);<br>        &#125;<br>        linkedList.remove(<span class="hljs-number">3</span>);       <br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><p>首先看下LinkedList的构造器，就是一个空的方法。执行后给属性进行初始化工作。</p><p><img src="H:\blog\assertPics\image-20210509101851357.png" alt="image-20210509101851357"></p><p><img src="H:\blog\assertPics\image-20210509102134987.png" alt="image-20210509102134987"></p><h4 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h4><p><img src="H:\blog\assertPics\image-20210509102236045.png" alt="image-20210509102236045"></p><p><img src="H:\blog\assertPics\image-20210509102516662.png" alt="image-20210509102516662"></p><p>添加第一个元素时，链表的头尾指针都是指向这个元素。</p><p><img src="H:\blog\assertPics\image-20210509102619712.png" alt="image-20210509102619712"></p><p>试着再添加一个元素，可以看到他们确实形成了双向链表的结构。</p><p><img src="H:\blog\assertPics\image-20210509102923166.png" alt="image-20210509102923166"></p><p><img src="H:\blog\assertPics\image-20210509103039749.png" alt="image-20210509103039749"></p><h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><p><img src="H:\blog\assertPics\image-20210509103340598.png" alt="image-20210509103340598"></p><p><img src="H:\blog\assertPics\image-20210509103540914.png" alt="image-20210509103540914"></p><p><img src="H:\blog\assertPics\image-20210509103527755.png" alt="image-20210509103527755"></p><p>checkElementIndex()是检查所要删除的元素下标是否是有效的。</p><p>unlink(Node<E> x)来删除链表中的元素，让其前面的元素，指向x.next，让后面的元素指向x.pre，让x.item=null。</p><p><img src="H:\blog\assertPics\image-20210509104940970.png" alt="image-20210509104940970"></p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set和List一样，都继承自Collection，所以常用方法和Collection一样。</p><p>遍历方式也一样，但是不能使用【索引】的方式来遍历，因为Set中元素是无序的。底层的实现不再是数组，而是数组+链表。</p><p>不能存放重复的元素；</p><p>是无序的：添加的顺序与取出的顺序不同，但是每次取出的顺序是固定的；</p><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>HashSet底层是HashMap，-》</p><p>（数组+链表+红黑树）jdk8.0</p><p>（数组+链表）jdk7.0</p><p><img src="H:\blog\assertPics\image-20210509110025408.png" alt="image-20210509110025408"></p><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><p>其底层是LinkedHashMap；（和HashSet维护的是HashMap结构）</p><p>底层维护一个数组+双向链表；</p><p>由于有了双向链表，这样就可以让插入顺序与取出的顺寻一致；（和HashSet不同）</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><img src="H:\blog\assertPics\image-20210510101714810.png" alt="image-20210510101714810"></p><p><img src="H:\blog\assertPics\image-20210506192801220.png" alt="image-20210506192801220"></p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>初始大小16，</p><p>加载应子：0.75</p><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><p>key、value均不允许为空，NullPointerException；</p><p>是线程安全的；</p><p><img src="H:\blog\assertPics\image-20210510112226641.png" alt="image-20210510112226641"></p><p>底层：Hashtable$Entry[]，初始大小：11；</p><p>当count&gt;=threshold时，</p><p>扩容算法：new = (old&lt;&lt;2)+1；新容量 = 原来的*2+1；</p><p><img src="H:\blog\assertPics\image-20210510151249644.png" alt="image-20210510151249644"></p><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p><img src="H:\blog\assertPics\image-20210510151626481.png" alt="image-20210510151626481"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="H:\blog\assertPics\image-20210510152742275.png" alt="image-20210510152742275"></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java笔记-泛型</title>
    <link href="/2021/08/08/Java%E7%AC%94%E8%AE%B0-%E6%B3%9B%E5%9E%8B/"/>
    <url>/2021/08/08/Java%E7%AC%94%E8%AE%B0-%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Java笔记-泛型"><a href="#Java笔记-泛型" class="headerlink" title="Java笔记-泛型"></a>Java笔记-泛型</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>由于之前不能够对加入到集合中的元素进行约束，可能会出现类型转换异常ClassCastException的异常。(不安全💔)</p><p>在遍历集合的时候，需要类型转换，数据量一大，效率就低。(效率低💔)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">generic01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">3</span>));<br>        list.add(<span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">5</span>));<br>        list.add(<span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;lily&quot;</span>, <span class="hljs-number">1</span>));<br><br>        list.add(<span class="hljs-keyword">new</span> Cat(<span class="hljs-string">&quot;kitty&quot;</span>, <span class="hljs-number">4</span>));<br><br>        <span class="hljs-keyword">for</span> (Object o : list) &#123;<br>            System.out.println(((Dog) o).getName() + <span class="hljs-string">&quot;-&quot;</span> + ((Dog) o).getAge());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="H:\blog\assertPics\image-20210511151918974.png" alt="image-20210511151918974"></p><p>使用泛型后，通过对存入到集合中元素进行类型约束，可以自动检查添加的元素类型是否是约定的类型；</p><p>同时在遍历时，不需要再进行转型，使得效率提高🧡🧡。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">generic01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;Dog&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Dog&gt;();<br>        list.add(<span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">3</span>));<br>        list.add(<span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">5</span>));<br>        list.add(<span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;lily&quot;</span>, <span class="hljs-number">1</span>));<br><br><span class="hljs-comment">//        list.add(new Cat(&quot;kitty&quot;, 4));    //使用泛型后，使用这条语句，会提示错误</span><br><br>        <span class="hljs-keyword">for</span> (Dog o : list) &#123;<br>            System.out.println(o.getName() + <span class="hljs-string">&quot;-&quot;</span> + o.getAge());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果将上面的那行代码取消注释，试图向list中添加Cat对象时，idea将会提示我有语法错误，这正体现出使用泛型的一个好处就是类型进行【约束】，保证了代码的安全性。</p><p>❌错误提示：</p><p><img src="H:\blog\assertPics\image-20210511152257920.png" alt="image-20210511152257920"></p><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p><img src="H:\blog\assertPics\image-20210511153557534.png" alt="image-20210511153557534"></p><p><img src="H:\blog\assertPics\image-20210511153709638.png" alt="image-20210511153709638"></p><p>在编译时就确定E是什么类型；</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><img src="H:\blog\assertPics\image-20210511154016796.png" alt="image-20210511154016796"></p><p>1、泛型中指定的数据类型必须是应用类型，不可以是基本数据类型（short\int\long\byte\float\double\boolean\char）；</p><p>2、指定泛型后，传入的类型可以是指定的类型，也可以是其子类型；</p><p>3、泛型的使用形式</p><p>下面两种都可以，推荐使用第二种，更加简洁。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> ArryList&lt;Integer&gt;();<br>ArrayList&lt;Integer&gt; list2 = <span class="hljs-keyword">new</span> ArryList&lt;&gt;();<br>ArrayList list3 = <span class="hljs-keyword">new</span> ArryList();   <span class="hljs-comment">//不使用泛型，默认是Object</span><br></code></pre></div></td></tr></table></figure><h2 id="自定义泛型-泛型接口-泛型方法"><a href="#自定义泛型-泛型接口-泛型方法" class="headerlink" title="自定义泛型/泛型接口/泛型方法"></a>自定义泛型/泛型接口/泛型方法</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//泛型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> 类名&lt;<span class="hljs-title">T</span>,<span class="hljs-title">R</span>...&gt;</span>&#123;<br>成员<br>&#125;<br><br><span class="hljs-comment">//泛型接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> 接口名&lt;<span class="hljs-title">T</span>,<span class="hljs-title">R</span>...&gt;</span>&#123;    <br>&#125;<br><br><span class="hljs-comment">//泛型方法</span><br>修饰符 &lt;T,R...&gt; 返回类型 方法名(参数列表)&#123;    <br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="H:\blog\assertPics\image-20210511165125110.png" alt="image-20210511165125110"></p><p><img src="H:\blog\assertPics\image-20210511165242210.png" alt="image-20210511165242210"></p><p><img src="H:\blog\assertPics\image-20210511170459084.png" alt="image-20210511170459084"></p><p><img src="H:\blog\assertPics\image-20210511172117159.png" alt="image-20210511172117159"></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS2017配置GLUT</title>
    <link href="/2021/08/08/VS2017%E9%85%8D%E7%BD%AEGLUT/"/>
    <url>/2021/08/08/VS2017%E9%85%8D%E7%BD%AEGLUT/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenGL-VS2017配置GLUT"><a href="#OpenGL-VS2017配置GLUT" class="headerlink" title="OpenGL-VS2017配置GLUT"></a>OpenGL-VS2017配置GLUT</h1><ol><li><p>将glut包解压；</p><p><img src="H:\blog\assertPics\image-20210617083853517.png" alt="image-20210617083853517"></p></li><li><p>将glut.h放到E:\2017\VC\Tools\MSVC\14.16.27023\include目录下；</p><p>这个目录，每个人的可能不一样，怎么得到自己的那个目录呢？</p><p>​    1）新建一个项目，随便include一个文件，比如#include<iostream></p><p>​    2）在这行代码上鼠标【右击】-&gt;打开文档“iostream”</p><p><img src="H:\blog\assertPics\image-20210617084312853.png" alt="image-20210617084312853"></p><p>​    3）在打开的窗口【标签】处，【右键】选择-&gt;打开所在的文件夹</p><p><img src="H:\blog\assertPics\image-20210617084446516.png" alt="image-20210617084446516"></p><p><img src="H:\blog\assertPics\image-20210617084531010.png" alt="image-20210617084531010"></p></li><li><p>将glut.lib、glut32.lib放到E:\2017\VC\Tools\MSVC\14.16.27023\lib\x86目录下；</p><p>当你完成了第二步，这个文件夹就是上一级的lib\x86；</p></li><li><p>将剩下的glut.dll、glut32.dll文件放到C:\Windows\SysWOW64下；</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图形学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划DP</title>
    <link href="/2021/08/08/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92DP/"/>
    <url>/2021/08/08/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92DP/</url>
    
    <content type="html"><![CDATA[<h1 id="动态规划DP"><a href="#动态规划DP" class="headerlink" title="动态规划DP"></a>动态规划DP</h1><p>1、求斐波那契数</p><p>Fibonacci以如下被以递推的方法定义：F(0)=0，F(1)=1, F(n)=F(n - 1)+F(n - 2)（n ≥ 2，n ∈ N*），简单的理解就是从n=2开始，每一项都等于前两项的和。<br>首先使用常规的方法求斐波那契数，也就是根据其定义，使用递归</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getFib2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;         <br>    <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">2</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><span class="hljs-keyword">return</span> getFib2(n-<span class="hljs-number">1</span>)+getFib2(n-<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>递归方法往往耗时，消耗内存。而且上面的方法有很多重复计算。例如，我在计算Fib(5)时，需要计算Fib(4)+Fib(3)；由于n=4,n=3均不是递归的终止条件，所以他们都需要再递归下去。先看Fib(4)：</p><p>由于Fib(4)由于没有到达递归的终止条件，仍然需要递归计算：Fib(3)+Fib(2)，然后Fib(3)再递归一次才终于计算出Fib(4)；</p><p>同理，Fib(3)也是这样算的。</p><p>不知道你有没有发现，在求Fib(5)时，我们就计算了两次Fib(3)，这就发生了多余的计算。</p><p>下面的就用DP来优化下。具体的细节也就是，使用一个输入来存储已经计算过的结果，比如上面的Fib(3)，当我们后面再次需要这个结果时，直接查询这个数组即可，这可比再算一遍要划得来。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> []dp =<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100</span>];<span class="hljs-comment">//定义存储表</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getFib</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(dp[n]!=<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//查表</span><br>            <span class="hljs-keyword">return</span> dp[n];<br>        &#125;<br>        <span class="hljs-comment">//当查询表后，发现没有计算过时，再使用递归来算，并存到表中</span><br>        dp[n]=getFib(n-<span class="hljs-number">1</span>)+getFib(n-<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>最后，来看下DP的降维打击：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">42</span>;<br>    <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>    System.out.println(getFib(n));<br>    <span class="hljs-keyword">long</span> s1 = System.currentTimeMillis();<br>    System.out.println(<span class="hljs-string">&quot;DP:&quot;</span>+(s1-start)+<span class="hljs-string">&quot;ms&quot;</span>);<br><br>    System.out.println(getFib2(n));<br>    System.out.println(<span class="hljs-string">&quot;DiGui:&quot;</span>+(System.currentTimeMillis()-s1)+<span class="hljs-string">&quot;ms&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="H:\blog\assertPics\image-20210606203117881.png" alt="image-20210606203117881"></p><p>2、丢棋子问题</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/2021/08/08/Java%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Spring/"/>
    <url>/2021/08/08/Java%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Spring/</url>
    
    <content type="html"><![CDATA[<h1 id="Java笔记——Spring"><a href="#Java笔记——Spring" class="headerlink" title="Java笔记——Spring"></a>Java笔记——Spring</h1><p>Spring理念——简化企业级应用开发的复杂性，使得现有的技术更容易使用，是一个大杂烩，整合了所有的技术框架。</p><p>SSM：SpringMVC+Spring+Mybatis</p><p>开发文档：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/">Spring Framework Documentation</a></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h2 id="🍑优点"><a href="#🍑优点" class="headerlink" title="🍑优点"></a>🍑优点</h2><ul><li>开源、免费的框架（容器）</li><li>轻量级、非入侵式的框架</li><li><strong>控制反转（IOC），面向切面编程（AOP）</strong></li><li>支持事务处理，对框架整合的支持</li></ul><p>Spring是一个轻量级的IOC和AOP框架</p><h2 id="🍇组成"><a href="#🍇组成" class="headerlink" title="🍇组成"></a>🍇组成</h2><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210729170952116.png" alt="image-20210729170952116"></p><p>Spring Boot</p><ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速开发单个微服务</li><li>约定大于配置</li></ul><p>Spring Cloud</p><ul><li>是基于Spring Boot实现的</li></ul><p>在学习Spring Boot之前需要完全掌握Spring以及SpringMVC。</p><p>弊端：配置十分繁琐。</p><h2 id="🥝IOC——控制反转"><a href="#🥝IOC——控制反转" class="headerlink" title="🥝IOC——控制反转"></a>🥝IOC——控制反转</h2><p>控制反转是一种设计思想，DI(依赖注入)是实现IoC的一种方法，也有人认为DI只是IOC的另一种说法。没有IOC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。<br><strong>IOC是Spring框架的核心</strong>，使用多种方式完美的实现了IOC，可以使用XML配置，也可以使用注解，新版本的Spring也可以零配置实现IOC。</p><p>Spring容器在初始化时<strong>先读取配置文件</strong>，根据配置文件或元数据<strong>创建与组织对象存入容器</strong>中，程序使用时<strong>再从IOC容器中取出需要的对象</strong>。</p><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p><p>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IOC容器，其实现方法是依赖注入（Dependency Injection,DI）。</p><h2 id="🥥尝鲜——Hello-Spring"><a href="#🥥尝鲜——Hello-Spring" class="headerlink" title="🥥尝鲜——Hello Spring"></a>🥥尝鲜——Hello Spring</h2><ol><li><p>添加依赖——spring-webmvc</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>编写实体类——User</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.twg.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Tang Wuguo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> //TODO $</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> $ 2021-7-29$</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;使用无参构造创建User对象&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;使用有参构造&quot;</span>);<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>编写配置文件——beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.pojo.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;twg&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.twg.pojo;<br><br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Tang Wuguo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> //TODO $</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> $ 2021-7-29$</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestUser</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>         User user = (User) context.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>        System.out.println(user);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ol><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210729211200259.png" alt="image-20210729211200259" style="zoom:67%;" /><p>可以看到，通过Spring创建user对象是，通过无参构造来创建的（这是Spring中IOC创建对象的默认方式），而在配置文件中给name属性赋值是通过setter方法实现的。</p><h3 id="IOC创建对象的方式"><a href="#IOC创建对象的方式" class="headerlink" title="IOC创建对象的方式"></a>IOC创建对象的方式</h3><ol><li><p>使用无参构造——默认</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;twg&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>使用有参构造</p><ol><li><p>下标赋值</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.pojo.User&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;twg1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>通过指定类型——不推荐</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;twg2&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>通过参数名——推荐</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;twg3&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol></li></ol><h2 id="🍋Spring的配置"><a href="#🍋Spring的配置" class="headerlink" title="🍋Spring的配置"></a>🍋Spring的配置</h2><ol><li><p>别名——alias</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;user2&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>beans</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.pojo.User&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user3&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;twg3&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>id：bean的唯一表示符</p><p>class：bean对象对应的全限定名</p><p>name：也是别名，但是可以取多个，可以用逗号、空格以及分号来分割多个别名</p></li><li><p>import</p><p>一般用于团队开发，可以将多个配置文件导入为一个</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;beans1.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;beans2.xml&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol><h2 id="🍒DI——依赖注入"><a href="#🍒DI——依赖注入" class="headerlink" title="🍒DI——依赖注入"></a>🍒DI——依赖注入</h2><ol><li><p>构造注入</p></li><li><p>setter注入</p><ul><li>依赖：bean对象的创建依赖于容器</li><li>注入：bean对象中的所有属性，由容器来注入</li></ul></li><li><p>扩展方式注入</p><ul><li><p>p命名空间——相当与set注入</p><p>现在配置文件中，加入对p命名空间的支持：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;<br></code></pre></div></td></tr></table></figure><p>就可以在bean标签中使用p:name来给name赋值了。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.pojo.User&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;twg&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>c命名空间——相当于构造注入</p><p>与上面的用法类似：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;<br></code></pre></div></td></tr></table></figure></li></ul></li></ol><div class="hljs code-wrapper"><pre><code> <figure class="highlight xml"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.pojo.User&quot;</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">&quot;twg_by_user3&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure></code></pre><h2 id="🌽Bean作用域"><a href="#🌽Bean作用域" class="headerlink" title="🌽Bean作用域"></a>🌽Bean作用域</h2><p><img src="H:\blog\Java笔记——Spring.assets\image-20210731142006189.png" alt="image-20210731142006189"></p><ol><li><p>singleton</p><p><img src="H:\blog\Java笔记——Spring.assets\image-20210731142045563.png" alt="image-20210731142045563"></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.something.DefaultAccountService&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- the following is equivalent, though redundant (singleton scope is the default) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.something.DefaultAccountService&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>prototype</p><p><img src="H:\blog\Java笔记——Spring.assets\image-20210731142127504.png" alt="image-20210731142127504"></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.something.DefaultAccountService&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol><h2 id="🧇自动装配Autowired"><a href="#🧇自动装配Autowired" class="headerlink" title="🧇自动装配Autowired"></a>🧇自动装配Autowired</h2><p>Spring中的三种装配方式：</p><ol><li>在xml中显示装配</li><li>在Java中显示配置</li><li>隐式——自动装配bean</li></ol><p>使用注解</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Dog dog;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Cat cat;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Dog <span class="hljs-title">getDog</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> dog;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Cat <span class="hljs-title">getCat</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cat;<br>    &#125;<br>    <br>&#125;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.pojo.Cat&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.pojo.Dog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.pojo.Person&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><p>@Autowire：使用在属性名上，便会自动查找IOC容器中对应的（byName）对象，并装配。</p><p>@Qualifier：当我们使用的autowire注解，同时在IOC容器中找不到要装配的bean时（可能是因为有多个bean，而且他们的name并不与Person类中属性名一样），这是就需要使用@Qualifier(value=”dog02”)来手动指定，需要装配的bean。</p><p>@Nullable：使用在某个字段前面，说明该字段可以为null。等价于 @Autowire(required = false)</p><p>@Resource：与@Autowire的功能类似，不过其机制相反。@Resource，首先通过byType——类型看有没有符合的bean，如果有多个则看bean的name。如果两个都不符合就会报错了，这时候就需要手动的去指定要装配的bean（例如：@Resource(name=”dog02”）</p><h2 id="🧀使用注解开发"><a href="#🧀使用注解开发" class="headerlink" title="🧀使用注解开发"></a>🧀使用注解开发</h2><p>使用之前：</p><ul><li><p>导入AOP依赖</p><img src="H:\blog\Java笔记——Spring.assets\image-20210731164619997.png" alt="image-20210731164619997" style="zoom:80%;" /></li><li><p>导入contex约束，增加注解支持</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <br>&lt;--!指定要扫描的包，这个包下的注解就会生效--&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.twg.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul><p>@Component：组件 ，修饰一个class，等价于<bean id="user" class="com.twg.pojo"/></p><ul><li>dao 【@Repository】</li><li>service 【@Service】</li><li>controller 【@Controller】</li><li>bean 【@ComPonent】</li><li>功能一样，将类添加到Spring容器中</li></ul><p>@Value：(“参数”) 自动赋值</p><p>@Scope：(“参数”) 设置模式 作用域</p><p>@Import：(“类”) 将另外一个类合并</p><p>注解更加麻烦 xml容易维护</p><p>最好的方式：xml-&gt;bean 注解-&gt;属性的注入</p><h2 id="🍥使用JavaConfig开发"><a href="#🍥使用JavaConfig开发" class="headerlink" title="🍥使用JavaConfig开发"></a>🍥使用JavaConfig开发</h2><p>除了使用xml配置文件式，还可以通过JavaConfig代替配置文件，使用纯Java的来配置。</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">AnnotationConfigApplicationContext</span><br></code></pre></div></td></tr></table></figure><p>纯Java的配置方式 SpringBoot前提34</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ApplicationContext text = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(LLPConfig.class);User getUser = (User) text.getBean(<span class="hljs-string">&quot;getUser&quot;</span>);System.out.println(getUser.getName());<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configurable</span><span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@ComponentScan(&quot;com.LLP&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LLPConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span><span class="hljs-comment">//注册一个bean标签 方法的名字就是id    public User getUser()&#123;        return new User();    &#125;&#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">@Component//组件<br>public class User &#123;<br>    @Value(&quot;小新&quot;)<br>    private String name;<br>    //实体类<br></code></pre></div></td></tr></table></figure><h2 id="🍦代理模式——Spring-AOP的底层"><a href="#🍦代理模式——Spring-AOP的底层" class="headerlink" title="🍦代理模式——Spring AOP的底层"></a>🍦代理模式——Spring AOP的底层</h2><p><strong>角色：</strong></p><ul><li>抽象主题角色</li><li>具体主题角色</li><li>代理角色</li></ul><p><strong>分类：</strong></p><ul><li><p>静态代理</p></li><li><p>动态代理：从静态代理会发现——每个代理类<strong>只能为一个接口</strong>服务，这样程序开发中必然会产生许多的代理类。所以我们想办法通过一个代理类完成全部的代理功能，那么我们就需要用动态代理。动态代理是在运行时，<strong>通过反射机制实现动态代理，并且能够代理各种类型的对象。</strong></p><p>要实现动态代理，需要<code>java.lang.reflect.InvocationHandler</code>接口和 <code>java.lang.reflect.Proxy</code>类的支持。</p><ol><li><p>编写抽象主题接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AbstractHost</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 房东买房</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sell</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>编写具体主题类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AbstractHost</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sell</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;房东卖出房子&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>编写动态代理类——实现了InvocationHandler</p><p>编写一个可以获取代理实例的方法，并重写invoke方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyHouse</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">newProxyInstance</span><span class="hljs-params">(Object target)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>        Object res = Proxy.newProxyInstance(target.getClass().getClassLoader(),<br>                target.getClass().getInterfaces(), <span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        Object ret;<br>        <span class="hljs-keyword">try</span>&#123;<br>            ret = method.invoke(target,args);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            log.error(<span class="hljs-string">&quot;调用&#123;&#125;.&#123;&#125;发生异常&quot;</span>, target.getClass().getName(), method.getName(), e);<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ProxyHouse proxyHouse = <span class="hljs-keyword">new</span> ProxyHouse();<br>        AbstractHost host = (AbstractHost)proxyHouse.newProxyInstance(<span class="hljs-keyword">new</span> Host());<br>        host.sell();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ol></li></ul><p><strong>动态代理步骤：</strong></p><ul><li><p>抽象主题类</p></li><li><p>具体主题类</p></li><li><p>动态代理类</p><p>只能代理接口，不支持抽象类，代理类需要实现InvocationHandler，实现invoke方法。invoke方法就是调用被代理接口的所有方法时需要调用的，返回的值是被代理接口的一个实现类。</p></li></ul><p><strong>优点：</strong></p><ul><li>职责清晰：具体角色是实现具体的业务逻辑，不用关心其他非本职责的事务，通过后期的代理完成一件事务，代码清晰。</li><li>高扩展性：可以扩展多个实现了抽象角色的类，这样，哪怕代理类不做修改仍然可以继续使用。还可以通过给代理类增加额外的功能来扩展委托类的功能，这样做我们只需要修改代理类而不需要再修改委托类，同样符合开闭原则。</li><li>智能性：动态代理的智能化</li></ul><img src="H:\blog\Java笔记——Spring.assets\image-20210731212052039.png" alt="image-20210731212052039" style="zoom: 80%;" /><h2 id="🍆AOP"><a href="#🍆AOP" class="headerlink" title="🍆AOP"></a>🍆AOP</h2><p>Spring中实现AOP</p><p>首先加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.8.M1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="三种实现方式"><a href="#三种实现方式" class="headerlink" title="三种实现方式"></a>三种实现方式</h3><ol><li><p><strong>使用spring接口实现</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.service.UserServiceImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.log.Log&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;afterLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.log.AfterLog&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointCut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.twg.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;afterLog&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-comment">//        动态代理的是接口！</span><br>        UserService bean = (UserService)context.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br><br>        bean.add();<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p><strong>自定义切面实现</strong></p><p>步骤：</p><ol><li><p>编写自定义切面类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法执行前的操作。。。by自定义切面&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法执行后的操作。。。by自定义切面&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAspect&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.aspect.MyAspect&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myAspect&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;point&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.twg.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-comment">//        动态代理的是接口！</span><br>        UserService bean = (UserService)context.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>        bean.add();<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><img src="H:\blog\Java笔记——Spring.assets\image-20210802091936937.png" alt="image-20210802091936937" style="zoom:67%;" /></li></ol></li><li><p><strong>注解实现</strong>——相当于对方法2的简化</p><ol><li><p>编写切片类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//标注这个类是一个切面</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AspectByAnno</span> </span>&#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(* com.twg.service.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;======方法执行前======by annotation&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;execution(* com.twg.service.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;======方法执行后======by annotation&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//在环绕增强中，可以给定一个参数，代表我们要处理切入的点</span><br>    <span class="hljs-meta">@Around(&quot;execution(* com.twg.service.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint jp)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕前&quot;</span>);<br>        <span class="hljs-comment">// 执行方法</span><br>        Object proceed = jp.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕后&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>测试</p></li></ol><img src="H:\blog\Java笔记——Spring.assets\image-20210802094214172.png" alt="image-20210802094214172" style="zoom:67%;" /></li></ol><h2 id="🍀Mybatis"><a href="#🍀Mybatis" class="headerlink" title="🍀Mybatis"></a>🍀Mybatis</h2><ol><li><p><strong>导入jar包</strong></p><p>junit, mybatis, mysql, spring, aop, mybatis-spring</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.8.M1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>配置mybatis</strong></p><ol><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vip</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> wallet;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>核心配置文件——mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.twg.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?useSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.mapper.VipMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">VipMapper</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Vip&gt; <span class="hljs-title">selectAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.twg.mapper.VipMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;vip&quot;</span>&gt;</span><br>        select * from test.vip<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>测试</p></li></ol><img src="H:\blog\Java笔记——Spring.assets\image-20210802103559615.png" alt="image-20210802103559615" style="zoom:67%;" /></li></ol><h2 id="🥨整合Mybatis"><a href="#🥨整合Mybatis" class="headerlink" title="🥨整合Mybatis"></a>🥨整合Mybatis</h2><ol><li><p>配置</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?useSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:com/twg/mapper/*.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vipMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.mapper.VipMapperImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionTemplate&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSession&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>mapperImpl</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VipMapperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">VipMapper</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> SqlSessionTemplate sqlSessionTemplate;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSqlSessionTemplate</span><span class="hljs-params">(SqlSessionTemplate sqlSessionTemplate)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sqlSessionTemplate = sqlSessionTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Vip&gt; <span class="hljs-title">selectAll</span><span class="hljs-params">()</span> </span>&#123;<br>        VipMapper mapper = sqlSessionTemplate.getMapper(VipMapper.class);<br>        <span class="hljs-keyword">return</span> mapper.selectAll();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMybatisSpring</span><span class="hljs-params">()</span></span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;spring-dao.xml&quot;</span>);<br>    VipMapper vipMapper = context.getBean(<span class="hljs-string">&quot;vipMapper&quot;</span>, VipMapper.class);<br>    List&lt;Vip&gt; vips = vipMapper.selectAll();<br>    <span class="hljs-keyword">for</span> (Vip vip : vips) &#123;<br>        System.out.println(vip);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="H:\blog\Java笔记——Spring.assets\image-20210802115620873.png" alt="image-20210802115620873"></p></li></ol><p>方式二：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VipMapperImpl2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SqlSessionDaoSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">VipMapper</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Vip&gt; <span class="hljs-title">selectAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getSqlSession().getMapper(VipMapper.class).selectAll();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vipMapper1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.mapper.VipMapperImpl2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMybatisSpring</span><span class="hljs-params">()</span></span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;spring-dao.xml&quot;</span>);<br>    VipMapper vipMapper = context.getBean(<span class="hljs-string">&quot;vipMapper&quot;</span>, VipMapper.class);<br>    List&lt;Vip&gt; vips = vipMapper.selectAll();<br>    <span class="hljs-keyword">for</span> (Vip vip : vips) &#123;<br>        System.out.println(vip);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>通过这种方法，我们不需要SqlSessionTemplate成员变量来getMapper。=，由于这里继承了一个SqlSessionDaoSupport，通过其中的getSqlSession()便可以得到一个SqlSession。</p><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><h3 id="事物？"><a href="#事物？" class="headerlink" title="事物？"></a>事物？</h3><p>把一组业务当成一个业务来做，要么都成功，要么失败；涉及数据的一致性问题。</p><h3 id="事物ACID原则"><a href="#事物ACID原则" class="headerlink" title="事物ACID原则"></a>事物ACID原则</h3><p>原子性；一致性；隔离性；持久性</p><h3 id="Spring中的事物"><a href="#Spring中的事物" class="headerlink" title="Spring中的事物"></a>Spring中的事物</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置声明型事务--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span>        <br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--结合AOP实现事务的织入--&gt;</span>    <span class="hljs-comment">&lt;!--配置事务的通知--&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;advice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span>        <br><span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span>            <br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--给哪些方法配置事务--&gt;</span>            <br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>            <br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;query&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>           <br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;del&quot;</span>  <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>            <br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span>  <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>        <br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置事务切入--&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>        <br><span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointCut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.LLP.dao.*.*(..))&quot;</span>/&gt;</span>        <br><span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;advice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>/&gt;</span>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis</title>
    <link href="/2021/08/08/Java%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Mybatis/"/>
    <url>/2021/08/08/Java%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Mybatis/</url>
    
    <content type="html"><![CDATA[<h1 id="Java笔记——Mybatis"><a href="#Java笔记——Mybatis" class="headerlink" title="Java笔记——Mybatis"></a>Java笔记——Mybatis</h1><h2 id="🛴我的第一个Mybatis程序"><a href="#🛴我的第一个Mybatis程序" class="headerlink" title="🛴我的第一个Mybatis程序"></a>🛴我的第一个Mybatis程序</h2><h3 id="1、创建数据库"><a href="#1、创建数据库" class="headerlink" title="1、创建数据库"></a>1、创建数据库</h3><img src="H:\blog\Java笔记——Mybatis.assets\image-20210720211142864.png" alt="image-20210720211142864" style="zoom:67%;" /><p>这是之前我做设计模式课设中建的一张表，下面我们就来查询这这张表中所有的记录，为了方便，就只查下前3个属性吧。</p><h3 id="2、创建maven项目"><a href="#2、创建maven项目" class="headerlink" title="2、创建maven项目"></a>2、创建maven项目</h3><p>​    删除src目录；</p><p>​    导入依赖：mysql、mybatis、junit</p><h3 id="3、创建子模块module"><a href="#3、创建子模块module" class="headerlink" title="3、创建子模块module"></a>3、创建子模块module</h3><p>同样选择maven项目，这样后面的再次创建maven项目时可以直接从父项目继承配置项。</p><h3 id="4、编写mybatis核心配置文件"><a href="#4、编写mybatis核心配置文件" class="headerlink" title="4、编写mybatis核心配置文件"></a>4、编写mybatis核心配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?useSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/twg/dao/UserDao.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5、编写mybatis工具类"><a href="#5、编写mybatis工具类" class="headerlink" title="5、编写mybatis工具类"></a>5、编写mybatis工具类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            String resource = <span class="hljs-string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;<br>            InputStream inputStream = Resources.getResourceAsStream(resource);<br>            SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6、编写代码"><a href="#6、编写代码" class="headerlink" title="6、编写代码"></a>6、编写代码</h3><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String username, String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.username = username;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>DAO</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.twg.dao;<br><br><span class="hljs-keyword">import</span> com.twg.entity.User;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>DAO持久层映射文件，由原来的UserDaoImpl类转变成一个Mapper配置文件</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.twg.dao.UserDao&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.twg.entity.User&quot;</span>&gt;</span><br>        select * from test.t_user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>特别注意：</p><p>namespace：指定（绑定）了DAO接口的位置；</p><p>id：为namespace所绑定的接口中的方法名；</p><p>resultType：指定了id所绑定的方法的返回值类型，如果是返回一个集合，则这里写集合中元素的类型；</p></li></ul><h3 id="7、测试"><a href="#7、测试" class="headerlink" title="7、测试"></a>7、测试</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.twg.dao;<br><br><span class="hljs-keyword">import</span> com.twg.entity.User;<br><span class="hljs-keyword">import</span> com.twg.utils.MybatisUtils;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br>        <span class="hljs-comment">// 方法1：getMapper</span><br>        UserDao userDao = sqlSession.getMapper(UserDao.class);<br>        List&lt;User&gt; userList = userDao.getUserList();<br>        <span class="hljs-comment">// 方法2：</span><br>        <span class="hljs-comment">//List&lt;User&gt; userList = sqlSession.selectList(&quot;com.twg.dao.UserDao.getUserList&quot;);</span><br><br>        <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>            System.out.println(user);<br>        &#125;<br><br>        sqlSession.close();<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="8、可能会遇到的问题"><a href="#8、可能会遇到的问题" class="headerlink" title="8、可能会遇到的问题"></a>8、可能会遇到的问题</h3><ul><li><p>映射文件没有在mybatis主配置文件中注册</p><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210720205949405.png" alt="image-20210720205949405"></p></li><li><p>构建项目后，找不到映射文件</p><ul><li>在porn.xml中配置resources，来防止资源导出异常；</li><li>也可以直接将映射文件放到resources目录下；</li></ul></li><li><p>映射文件中的参数一定要写对</p><ul><li>namespace：表明这个映射文件所绑定的接口类是哪个</li><li>id：绑定接口中的哪个方法，方法名一定要和接口中定义的名字一样</li><li>resultType：表明返回值类型</li></ul><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210720210326930.png" alt="image-20210720210326930"></p></li></ul><h2 id="🛫解锁其它姿势——CRUD"><a href="#🛫解锁其它姿势——CRUD" class="headerlink" title="🛫解锁其它姿势——CRUD"></a>🛫解锁其它姿势——CRUD</h2><ol><li><p>回顾下通过mybatis写一个接口的流程</p><ol><li><p>在Mapper中定义一个抽象方法</p></li><li><p>在映射文件(XXMapper.xml)中绑定这个方法</p></li><li><p>进行测试/使用，注意如果是<strong>增删改</strong>需要提交事物（”sqlSession.commit();”）</p></li></ol></li><li><p>看看在映射文件中还可以写哪些标签</p><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210721221129218.png" alt="image-20210721221129218"></p></li><li><p>增</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 向用户表中插入一条记录</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 新增加的记录的id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">inserUser</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inserUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.twg.entity.User&quot;</span>&gt;</span><br>    insert into test.t_user (username, password)<br>    values (#&#123;username&#125;, #&#123;password&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>删</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过指定id删除一条用户表记录</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">delUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delUser&quot;</span>&gt;</span><br>    delete<br>    from t_user<br>    where id = #&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>改</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新一条用户表信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.twg.entity.User&quot;</span>&gt;</span><br>    update t_user<br>    set username    = #&#123;username&#125;,<br>        password=#&#123;password&#125;<br>    where id = #&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>查</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据ID查询用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id:用户的id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回指定用户id的信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.twg.entity.User&quot;</span>&gt;</span><br>    select *<br>    from test.t_user<br>    where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol><h2 id="🎁万能的Map"><a href="#🎁万能的Map" class="headerlink" title="🎁万能的Map"></a>🎁万能的Map</h2><p>当实体类的属性过多时（表的字段太多），可以考虑使用Map。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过map的方式查找指点用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> map</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">User <span class="hljs-title">getUserById2</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span></span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById2&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.twg.entity.User&quot;</span>&gt;</span><br>    select *<br>    from test.t_user<br>    where id = #&#123;helloId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetUserById2</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;helloId&quot;</span>,<span class="hljs-number">1</span>);<br>    System.out.println(mapper.getUserById2(map));<br><br>    sqlSession.close();<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="🎭模糊查询"><a href="#🎭模糊查询" class="headerlink" title="🎭模糊查询"></a>🎭模糊查询</h2><p>为了防止SQL注入，注意在传入参数时将参数写si.</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//方法1</span><br>List&lt;User&gt; userList = mapper.getUserList(<span class="hljs-string">&quot;%李%&quot;</span>);<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>方法<span class="hljs-number">2</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> &quot;%&quot;#&#123;<span class="hljs-keyword">value</span>&#125;&quot;%&quot;<br></code></pre></div></td></tr></table></figure><h2 id="🍀环境配置"><a href="#🍀环境配置" class="headerlink" title="🍀环境配置"></a>🍀环境配置</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>Mybatis可以配置多个环境，但是每个SqlSessionFactory只能选择一种。</p><p>默认事物管理器——JDBC</p><p>连接池——POOLED</p><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210725203805540.png" alt="image-20210725203805540"></p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>可以通过properties属性来应用配置文件。</p><p>这些属性都是可以替换了，例如.properties文件</p><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210725205432826.png" alt="image-20210725205432826"></p><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210725205256245.png" alt="image-20210725205256245"></p><p>可以通过引入外部配置文件来确定参数，也可以通过<propertiy>标签来指定。外部文件的优先级更高。</p><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210725205507441.png" alt="image-20210725205507441"></p><p>配置好参数，就可以通过 <strong>${ }</strong> 的方式使用了。</p><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>为什么要取别名？——为了简洁</p><p>下面这些返回值类型、参数类型写的太长了，也容易出错。</p><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210725205938230.png" alt="image-20210725205938230"></p><p>2种解决办法：</p><ul><li>给实体类取别名</li><li>给实体类的包取别名，这里自动自动将别名取成，这个包中类名，并将首字母小写。如果需要改成别的名字，在实体类上加上注解@Alias(“xxx”)</li></ul><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210725210404834.png" alt="image-20210725210404834"></p><h3 id="映射器"><a href="#映射器" class="headerlink" title="映射器"></a>映射器</h3><p>绑定映射文件。</p><ul><li>通过指定资源目录——推荐✨</li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/twg/dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>下面两种有限制：<ul><li>接口和其配置文件需要在同一包下</li><li>需要同名</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.twg.dao.UserMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.twg.dao.UserMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="生命周期和作用域"><a href="#生命周期和作用域" class="headerlink" title="生命周期和作用域"></a>生命周期和作用域</h3><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210725212908950.png" alt="image-20210725212908950"></p><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210725213039250.png" alt="image-20210725213039250"></p><h2 id="🎗解决属性名与字段名不一致的问题"><a href="#🎗解决属性名与字段名不一致的问题" class="headerlink" title="🎗解决属性名与字段名不一致的问题"></a>🎗解决属性名与字段名不一致的问题</h2><p>问题：当属性名与字段名不一致时，查询出来的结果会显示“null”</p><p>例如，在表中密码字段是pwd，但是我在实体类中的属性写的是password.</p><p>解决：</p><ul><li><p>起别名</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.twg.entity.User&quot;</span>&gt;</span><br>    select id,name,pwd as password<br>    from test.t_user<br>    where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>resultMap</p><p>结果集映射</p>  <resultMap id="UserMap" type="User">      <result column="pwd" property="password"/>  </resultMap>  <select id="getUserById" resultMap="UserMap">      select id,name,pwd      from test.t_user      where id = #{id}  </select></li></ul><h2 id="📃日志"><a href="#📃日志" class="headerlink" title="📃日志"></a>📃日志</h2><p>当代码出现异常，需要排错时，日志就是最好的工具！</p><p>以前：手动输出，打印</p><p>现在：日志工厂</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210725220515609.png" alt="image-20210725220515609"></p><h3 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h3><p>也是一种日志，是Apache的一个开源项目，通过他可以控制日志的输出格式，日志的输送目的地、日志的级别等。</p><p>1、导入log4j依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>2、添加log4j.properties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#控制台输出的相关设置</span><br><span class="hljs-meta">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-meta">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><br><span class="hljs-meta">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">【%c】-%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#文件输出的相关设置</span><br><span class="hljs-meta">log4j.appender.file</span> = <span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-meta">log4j.appender.file.File</span>=<span class="hljs-string">./log/kuang.log</span><br><span class="hljs-meta">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><br><span class="hljs-meta">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#日志输出级别</span><br><span class="hljs-meta">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><br></code></pre></div></td></tr></table></figure><p>3、配置mybatis</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LOG4J&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210726202742355.png" alt="image-20210726202742355"></p><h2 id="📑分页"><a href="#📑分页" class="headerlink" title="📑分页"></a>📑分页</h2><p>为什么需要分页——数据太多，不方便处理</p><p>之前：通过SQL中的limit</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> limit <span class="hljs-number">3</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 查询[<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)<br></code></pre></div></td></tr></table></figure><p>现在：mybatis实现</p><h2 id="⚙使用注解"><a href="#⚙使用注解" class="headerlink" title="⚙使用注解"></a>⚙使用注解</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.mybatis.example;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BlogMapper</span> </span>&#123;<br>  <span class="hljs-meta">@Select(&quot;SELECT * FROM blog WHERE id = #&#123;id&#125;&quot;)</span><br>  <span class="hljs-function">Blog <span class="hljs-title">selectBlog</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><img src="H:\blog\Java笔记——Mybatis.assets\image-20210726211745259.png" alt="image-20210726211745259" style="zoom:200%;" /><p>同样，使用注解这种方式，也需要在配置文件中注册mapper。</p><p>当存在多个参数时，每个参数前面必须加上@param()注解</p><ul><li>基本数据类型、String需要加上</li><li>应用类型不需要</li><li>只有一个参数可以不用</li><li>在sql中引用的就是@param中填写的参数</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>  <span class="hljs-meta">@Select(&quot;SELECT * FROM user where id = #&#123;id&#125; and name = #&#123;name&#125;&quot;)</span><br>  <span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id, <span class="hljs-meta">@param(&quot;name&quot;)</span> String username)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="🎈Lombok"><a href="#🎈Lombok" class="headerlink" title="🎈Lombok"></a>🎈Lombok</h2><p>使用Lombok，可以不必再写哪些死板的getter、setter方法了。</p><p>但是：舍弃了一定规范，得到了一些便利。</p><ol><li><p>idea安装Lombok插件</p><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210726214816522.png" alt="image-20210726214816522"></p></li><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>使用注解@Data</p><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210726215304305.png" alt="image-20210726215304305"></p></li></ol><h2 id="🏐动态SQL"><a href="#🏐动态SQL" class="headerlink" title="🏐动态SQL"></a>🏐动态SQL</h2><p>what：根据不同的条件生成不同的SQL语句</p><p>在实际的应用中常常通过指定多个条件来查询，例如，这里有一张购买记录表，我需要可以指定VIP的id（v_id），产品的id(p_id)以及购买时间来查询，当用户没有指定某个条件时，查询时就不对这个字段进行限制，这里就可以通过动态SQL来实现。</p><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210727162040219.png" alt="image-20210727162040219"></p><p>官网中给了这样一些标签</p><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210727163240019.png" alt="image-20210727163240019"></p><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><ol><li><p>编写接口</p><p>接口中有一个Map参数，是为了指定查询条件。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BuyProductMapper</span> </span>&#123;<br>    <span class="hljs-comment">/**通过多个条件，查询BuyProduct表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;BuyProduct&gt; <span class="hljs-title">getBuyIf</span><span class="hljs-params">(Map map)</span></span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>编写mapper</p><p>为了实现动态的SQL，这里主要是使用了<if>标签，当我们传的map参数中，存在某个key，就在原先的SQL语句后面拼接查询条件。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.twg.dao.BuyProductMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getBuyIf&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;BuyProduct&quot;</span>&gt;</span><br>        select * from test.buyproduct where 1=1<br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;v_id != null&quot;</span>&gt;</span><br>            and v_id = #&#123;v_id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;p_id != null&quot;</span>&gt;</span><br>            and p_id = #&#123;p_id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;time != null&quot;</span>&gt;</span><br>            and time &gt; #&#123;time&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>测试</p></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuyProductMapperTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getBuyIf</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br>        BuyProductMapper mapper = sqlSession.getMapper(BuyProductMapper.class);<br>        HashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><span class="hljs-comment">//        map.put(&quot;v_id&quot;,&quot;1&quot;);</span><br><span class="hljs-comment">//        map.put(&quot;p_id&quot;,&quot;1&quot;);</span><br>        map.put(<span class="hljs-string">&quot;time&quot;</span>,<span class="hljs-string">&quot;2021-7-1&quot;</span>);<br>        List&lt;BuyProduct&gt; buys = mapper.getBuyIf(map);<br>        <span class="hljs-keyword">for</span> (BuyProduct buy : buys) &#123;<br>            System.out.println(buy);<br>        &#125;<br><br>        sqlSession.close();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>map:{“time”,”2021-7-1”}</p><p>可以看到查询到了所有时间在2021-7-1之后的记录</p><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210727162919531.png" alt="image-20210727162919531"></p></li><li><p>map:{(“v_id”,”1”), (“p_id”,”1”)}</p><p>通过指定用户id和产品id，我们查询到了一条数据</p><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210727163057263.png" alt="image-20210727163057263"></p></li></ul><h3 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h3><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从多个条件中选取一个来查询购物记录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;BuyProduct&gt; <span class="hljs-title">getBuyChoose</span><span class="hljs-params">(Map map)</span></span>;<br></code></pre></div></td></tr></table></figure></li><li><p>mapper</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getBuyChoose&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;BuyProduct&quot;</span>&gt;</span><br>    select * from test.buyproduct<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;v_id&quot;</span>&gt;</span><br>                and v_id like #&#123;v_id&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;p_id&quot;</span>&gt;</span><br>                and p_id like #&#123;p_id&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>                and time &gt;= CURDATE()<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>这里我使用了<select>标签，<em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。<select>等价于下面的<trim>。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;WHERE&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;AND |OR &quot;</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>测试</p></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getBuyChoose</span><span class="hljs-params">()</span></span>&#123;<br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br>    BuyProductMapper mapper = sqlSession.getMapper(BuyProductMapper.class);<br>    HashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-comment">//        map.put(&quot;v_id&quot;,&quot;1&quot;);</span><br>    <span class="hljs-comment">//        map.put(&quot;p_id&quot;,&quot;1&quot;);</span><br>    List&lt;BuyProduct&gt; buys = mapper.getBuyChoose(map);<br>    <span class="hljs-keyword">for</span> (BuyProduct buy : buys) &#123;<br>        System.out.println(buy);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>当map为空时，根据配置文件中写的sql，他会默认添加<otherwise>中的条件，也就是默认查询到今天的购买记录。</li></ul><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210727174434406.png" alt="image-20210727174434406"></p><ul><li><p>map:{(“v_id”,”1”), (“p_id”,”1”)}</p><p>由于choose、when、otherwise类似于Java中的switch语句，哪怕我这里给出了两个查询条件，它根据我们写的mapper，它会优先取v_id作为条件，所以查询出了下面这些记录。</p><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210727174807964.png" alt="image-20210727174807964"></p></li></ul><h3 id="trim、where、set"><a href="#trim、where、set" class="headerlink" title="trim、where、set"></a>trim、where、set</h3><p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p><p>如果 <em>where</em> 元素与你期望的不太一样，你也可以通过自定义 trim 元素来定制 <em>where</em> 元素的功能。比如，和 <em>where</em> 元素等价的自定义 trim 元素为：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;WHERE&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;AND |OR &quot;</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</p><p>来看看与 <em>set</em> 元素等价的自定义 <em>trim</em> 元素吧：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;SET&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">select</span> id=&quot;selectPostIn&quot; resultType=&quot;domain.blog.Post&quot;&gt;<br>  <span class="hljs-keyword">SELECT</span> *<br>  <span class="hljs-keyword">FROM</span> POST P<br>  <span class="hljs-keyword">WHERE</span> ID <span class="hljs-keyword">in</span><br>  &lt;<span class="hljs-keyword">foreach</span> item=&quot;item&quot; <span class="hljs-keyword">index</span>=&quot;index&quot; collection=&quot;list&quot;<br>      <span class="hljs-keyword">open</span>=&quot;(&quot; separator=&quot;,&quot; <span class="hljs-keyword">close</span>=&quot;)&quot;&gt;<br>        #&#123;item&#125;<br>  &lt;/<span class="hljs-keyword">foreach</span>&gt;<br>&lt;/<span class="hljs-keyword">select</span>&gt;<br></code></pre></div></td></tr></table></figure><p>foreach元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。</p><h2 id="🌊缓存"><a href="#🌊缓存" class="headerlink" title="🌊缓存"></a>🌊缓存</h2><p>将数据缓存到内存中，提高访问速度。</p><ul><li>一级缓存（本地缓存）——默认，sqlSession域</li><li>二级缓存——namespace</li><li>自定义缓存</li></ul><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>与数据库同一次会话期间查询到的数据会放在本地缓存中；</p><p>之后再次查询时会直接从缓存中获取；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetUserById</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    System.out.println(mapper.getUserById(<span class="hljs-number">1</span>));<br>    System.out.println(<span class="hljs-string">&quot;-----------------------&quot;</span>);<br>    System.out.println(mapper.getUserById(<span class="hljs-number">1</span>));<br>    sqlSession.close();<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210728220543416.png" alt="image-20210728220543416"></p><p>从日志中，我们可以看到，虽然查询了两次，但是只有一条select语句。</p><p>失效的情况：</p><ul><li>查询不同的东西</li><li>增删改操作，可能会改变数据，缓存也会失效</li><li>查询不同的mapper</li></ul><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>因为一级缓存的作用域太低了，所以出现了二级缓存。——namespace域，全局缓存。</p><p>工作机制</p><ul><li>一个会话查询一条数据，这个数据就会放到一级缓存</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；此时一级缓存的数据就会保存到二级缓存中</li><li>（在同一个mapper）新的会话再次查询信息时，就会直接从二级缓存中获取数据</li><li>不同的mapper查询出的数据会放到自己对应的缓存中</li></ul><p>步骤：</p><ol><li><p>显式地在配置文件中，开启全局缓存</p><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210729092625651.png" alt="image-20210729092625651"></p></li><li><p>在当前mapper中使用二级缓存</p><p>默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中的数据进行缓存。 要启用全局的二级缓存，只需要在你的 SQL 映射文件中添加一行：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><p>也可以定制其中的参数：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag">  <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetUserById</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    System.out.println(mapper.getUserById(<span class="hljs-number">1</span>));<br>    sqlSession.close();<br><br>    SqlSession sqlSession2 = MybatisUtils.getSqlSession();<br>    UserMapper mapper2 = sqlSession2.getMapper(UserMapper.class);<br>    System.out.println(<span class="hljs-string">&quot;-----------------------&quot;</span>);<br>    System.out.println(mapper2.getUserById(<span class="hljs-number">1</span>));<br>    sqlSession2.close();<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="H:\blog\Java笔记——Mybatis.assets\image-20210729093139833.png" alt="image-20210729093139833"></p><p>上面的代码中，我创建了两个sqlsession对象，并通过该对象获取中同类型的mapper，当我使用完第一个sqlsession并关闭后，再使用一个新的sqlsession时，可以看到日志中并没有再次查询数据库，说明二级缓存起作用了。</p><h3 id="自定义缓存Ehcache"><a href="#自定义缓存Ehcache" class="headerlink" title="自定义缓存Ehcache"></a>自定义缓存Ehcache</h3><p>除了上述自定义缓存的方式，你也可以通过实现你自己的缓存，或为其他第三方缓存方案创建适配器，来完全覆盖缓存行为。</p></li><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure></li><li><p>启用缓存</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>添加ehcache配置文件——ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"> <span class="hljs-meta">&lt;?xml version=1.0 encoding=UTF-8 ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">http://www.w3.org/2001/XMLSchema-instance</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">http://ehcache.org/ehcache.xsd</span></span><br><span class="hljs-tag">         <span class="hljs-attr">updateCheck</span>=<span class="hljs-string">false</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">./tmpdir/Tmp_EhCache/</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">            <span class="hljs-attr">eternal</span>=<span class="hljs-string">false</span></span><br><span class="hljs-tag">            <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">10000</span></span><br><span class="hljs-tag">            <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">false</span></span><br><span class="hljs-tag">            <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">false</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">1800</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">259200</span></span><br><span class="hljs-tag">            <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">LRU/</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag">            <span class="hljs-attr">name</span>=<span class="hljs-string">cloud_user</span></span><br><span class="hljs-tag">            <span class="hljs-attr">eternal</span>=<span class="hljs-string">false</span></span><br><span class="hljs-tag">            <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">5000</span></span><br><span class="hljs-tag">            <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">false</span></span><br><span class="hljs-tag">            <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">false</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">1800</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">1800</span></span><br><span class="hljs-tag">            <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">LRU/</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
